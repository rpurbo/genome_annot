# ==================================================================
# bacteria.v01.snk
# version: 04.08.19
#
# Snakemake workflow definition for annotating bacterial genome generated 
# from Pacbio HGAP3 protocol.
# 
# To achieve portability and reproducibility, the tools used in the workflow
# are installed in Singularity containers (SIMG_BASE).
#
# Steps:
# 1. clean contig sequences headers
# 2. circularize contig sequences - berokka
# 3. identify rRNA sequences - barrnap
# 4. cluster rRNA sequences - uclust
# 5. assign taxa - blastn vs. SILVA SSU database
# 6. genome feature annotation - prokka
#
# ==================================================================


from os.path import join

SIMG_BASE=config["simg_base"]
NAME=config["name"]
SMRTDIR="smrt"

rule all:
	input: 
		"99_summary/summary.txt"

rule clean_header:
	input:
		asm_fasta = join(SMRTDIR,'polished_assembly.fasta'),
		asm_fastq = join(SMRTDIR,'polished_assembly.fastq')
	output:
		clean_fasta = join("00_clean",'polished_assembly.clean.fasta'),
		clean_fastq = join("00_clean",'polished_assembly.clean.fastq')
	shell:
		"sed -e \'s/|quiver//g\' {input.asm_fasta} > {output.clean_fasta} ;"
		"sed -e \'s/|quiver//g\' {input.asm_fastq} > {output.clean_fastq} "

rule circularize:
	input:
		clean_fasta = join("00_clean",'polished_assembly.clean.fasta')
	output:
		fasta = "01_circularize/polished_assembly.clean.circular.fasta",
		dir = directory("01_circularize/contigs")
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	log:
		"logs/01_circularize.log"
	shell:
		"singularity exec {params.asm_simg} berokka --force --outdir 01_circularize {input.clean_fasta} 2> {log};"
		"cp 01_circularize/02.trimmed.fa {output.fasta};"
		"mkdir -p 01_circularize/contigs;"
		"singularity exec {params.asm_simg} WF_split_contigs.pl;"
		"cp {output.fasta} ." 

rule ident_rrna:
	input:
		"01_circularize/polished_assembly.clean.circular.fasta"
	output:
		gff = "02_rrna/rrna.gff",
		all_fasta = "02_rrna/rrna.fasta",
		fasta = "02_rrna/16S_rrna.fasta"
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	log:
		"logs/02_rrna.log"
	threads:
		4
	shell:
		"singularity exec {params.asm_simg} barrnap --threads {threads} --kingdom bac --outseq {output.all_fasta} {input} > {output.gff} 2> {log};"
		"cat {output.all_fasta} | grep -A 1 16S_rRNA > {output.fasta}"

rule cluster_rrna:
	input: 
		"02_rrna/16S_rrna.fasta"
	output:
		rep = "02_rrna/16S_rrna.rep.fasta"
	log:
		"logs/02_rrna_uclust.log"
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	shell:
		"singularity exec {params.asm_simg} uclust --sort {input} --output 02_rrna/16S_rrna.sorted.fasta 2> {log};"
		"singularity exec {params.asm_simg} uclust --input 02_rrna/16S_rrna.sorted.fasta --uc 02_rrna/16S_rrna.sorted.uc --id 0.97 --rev 2>> {log};"
		"singularity exec {params.asm_simg} uclust --types S --uc2fasta 02_rrna/16S_rrna.sorted.uc --input 02_rrna/16S_rrna.sorted.fasta --output {output.rep} 2>> {log}"
		
rule assign_taxa:
	input:
		"02_rrna/16S_rrna.rep.fasta"
	output:
		hits="03_taxa_class/16S_rrna.rep.SILVA.txt",
		taxon="03_taxa_class/16S_rrna.rep.taxa.txt"
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	log:
		"logs/03_taxa_class.log"
	threads:
		8
	shell:
		"singularity exec {params.asm_simg} blastn -num_threads {threads} -outfmt \"7 qaccver saccver pident qlen slen length mismatch gapopen qstart qend sstart send evalue bitscore\" -query {input} -db /apps/db/SILVA/SILVA_132_SSURef_Nr99 -out {output.hits} 2> {log};"
		"singularity exec {params.asm_simg} extract_top_blastn_hits.pl {output.hits} >  {output.taxon} ;"
		"cp {output.taxon} ."

rule annotation:
	input:
		"01_circularize/polished_assembly.clean.circular.fasta"
	output:
		"04_features/annot.gbk",
		"04_features/annot.tsv",
		"04_features/annot.txt"
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	log:
		"logs/04_features.log"
	threads:
		8
	shell:
		"singularity exec {params.asm_simg} prokka --force --prefix annot --outdir 04_features --cpus {threads} --rfam {input} ;"
		"cp 04_features/annot.log {log}"
	
rule summarize:
	input:
		"01_circularize/polished_assembly.clean.circular.fasta",
		"02_rrna/16S_rrna.rep.fasta",
		"03_taxa_class/16S_rrna.rep.SILVA.txt",
		"03_taxa_class/16S_rrna.rep.taxa.txt",
		"04_features/annot.txt",
		"04_features/annot.tsv"
	output:
		"99_summary/summary.txt"
	params:
		asm_simg = join(config["simg_base"], 'asm_annot_tools.sif')
	shell:
		"singularity exec {params.asm_simg} WF_sum_instrument.pl > 99_summary/instrument.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_subreads.pl > 99_summary/subreads.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_assembly.pl > 99_summary/assembly.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_coverage.pl > 99_summary/coverage.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_assembly_postQC.v2.pl > 99_summary/assembly_postQC.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_taxa.pl > 99_summary/taxa.summary.txt;"
		"singularity exec {params.asm_simg} WF_sum_annot.pl > 99_summary/annot.summary.txt;"
		"cat 99_summary/instrument.summary.txt > {output};"
		"echo '\n\n' >> {output};"
                "cat 99_summary/subreads.summary.txt >> {output};"
                "echo '\n\n' >> {output};"
                "cat 99_summary/assembly.summary.txt >> {output};"
                "echo '\n\n' >> {output};"
                "cat 99_summary/coverage.summary.txt >> {output};"
                "echo '\n\n' >> {output};"
                "cat 99_summary/assembly_postQC.summary.txt >> {output};"
                "echo '\n\n' >> {output};"
                "cat 99_summary/taxa.summary.txt >> {output};"
                "echo '\n\n' >> {output};"
                "cat 99_summary/annot.summary.txt >> {output};"
		"cp {output} . ;"
		"singularity exec {params.asm_simg} cat /apps/MANIFEST > MANIFEST"









